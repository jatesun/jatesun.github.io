<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on jatesun</title>
    <link>http://jatesun.github.io/post/</link>
    <description>Recent content in Posts on jatesun</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 24 Aug 2016 16:26:31 +0200</lastBuildDate>
    <atom:link href="http://jatesun.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>集合源码之hashMap</title>
      <link>http://jatesun.github.io/2016/08/24/%E9%9B%86%E5%90%88%E6%BA%90%E7%A0%81%E4%B9%8Bhashmap</link>
      <pubDate>Wed, 24 Aug 2016 16:26:31 +0200</pubDate>
      
      <guid>http://jatesun.github.io/2016/08/24/%E9%9B%86%E5%90%88%E6%BA%90%E7%A0%81%E4%B9%8Bhashmap</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://oajsuo3nv.bkt.clouddn.com/2016-8-21-%E5%A4%A9%E7%A9%BA.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;引子:69821dbc4807e9884618c48763635519&#34;&gt;引子&lt;/h2&gt;

&lt;p&gt;java的集合类使我们经常使用的，而hashmap更是集合中常用的集合类。由于使用的散列，hashmap的crud操作都接近于常数操作时间，本文目的是探究hashmap的底层实现，看java中的散列实现，希望能给想要了解hashmap实现的童鞋一点帮助，需要注意的是hashmap不是线程安全的集合类。 本文分为三部分：第一部分探究hashmap的数据结构、第二部分探究hashmap的重要算法实现、第三部分探究hashmap中值得探讨的地方。文章不会列出详细源码，常规代码概述而过，文章假定读者已经具备散列的相关基础知识，如果你对散列不熟悉或者想重温一下，请参考&lt;a href=&#34;http://jatesun.github.io/2016/08/12/%E6%95%A3%E5%88%97%E8%A1%A8%E9%9D%A2%E9%9D%A2%E8%A7%82/&#34;&gt;散列表面面观&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;hashmap的数据结构:69821dbc4807e9884618c48763635519&#34;&gt;hashMap的数据结构&lt;/h2&gt;

&lt;p&gt;程序是由数据结构和算法构成，弄懂了数据结构和算法，这个程序也就自然明白。而数据结构更是程序的骨架。所以首先，我们看一下hashmap的数据结构示意图，在示意图的基础上进行。&lt;img src=&#34;http://oajsuo3nv.bkt.clouddn.com/2016-08-21-hashmap.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;散列表相关:69821dbc4807e9884618c48763635519&#34;&gt;散列表相关&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数组&lt;/strong&gt;：即为上图的table，也就是hashmap底层的存储结构。该数字中存放的是hashmap定义的节点类，由于hashmap对冲突采用的拉链法，所以节点类之间形成了链表。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;节点类&lt;/strong&gt;：存储数据的节点类Entry。节点类数据结构为key、value、hash值以及指向下一个节点的next节点（类似链表的节点类）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;装填因子&lt;/strong&gt;：loadFactor。在散列表面面观中提到，采用拉链法解决冲突的散列表的装填因子在0.75到0.80之间。hashmap的默认装填因子为0.75&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;散列函数&lt;/strong&gt;：下文详述。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;初始容量大小&lt;/strong&gt;：默认为16，也可以通过构造函数传入，但是必须是2的指数，原因下文详述。&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;临界容量&lt;/strong&gt;：即为扩容的临界容量，为容量大小与装填因子的乘积。&lt;/p&gt;

&lt;h4 id=&#34;实例变量:69821dbc4807e9884618c48763635519&#34;&gt;实例变量&lt;/h4&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;大小&lt;/strong&gt;：hashmap的大小（size）。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;最大容量&lt;/strong&gt;：MAXIMUM_CAPACITY，为1 &amp;lt;&amp;lt; 30。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;修改次数&lt;/strong&gt;：modCount。&lt;/p&gt;

&lt;h2 id=&#34;hashmap关键算法实现:69821dbc4807e9884618c48763635519&#34;&gt;hashMap关键算法实现&lt;/h2&gt;

&lt;p&gt;hashMap实现了map接口，下面我们会对map接口中的关键方法进行分析。&lt;/p&gt;

&lt;h4 id=&#34;构造方法:69821dbc4807e9884618c48763635519&#34;&gt;构造方法&lt;/h4&gt;

&lt;p&gt;hashMap提供了三个构造函数：无参构造函数、单参构造函数（容量）、双参构造函数（容量、装填因子）。我们探讨双参构造函数，其他两个都是以此为基础。构造方法分为如下几步：&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;参数校验&lt;/strong&gt;：
1、如果初始容量小于0，抛出参数异常。如果初始容量大于hashmap最大容量，那么默认赋值为最大容量
2、如果装填因子小于0或不合法也抛出参数异常。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;调整容量&lt;/strong&gt;：调整容量至不小于初始容量的2的指数容量。即容量必须为2的指数大小。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;初始化&lt;/strong&gt;：初始化装填因子、初始化临界容量、初始化数组（大小即为调整容量后的大小）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;init函数&lt;/strong&gt;：钩子函数，用于子类实现自己特殊要求。&lt;/p&gt;

&lt;h4 id=&#34;重要算法:69821dbc4807e9884618c48763635519&#34;&gt;重要算法&lt;/h4&gt;

&lt;p&gt;对hashmap中重要的算法案进行分析，分为增删改查。所有的增删查方法modcount都要修改。&lt;/p&gt;

&lt;h5 id=&#34;增-put-k-v-改:69821dbc4807e9884618c48763635519&#34;&gt;增（put（K,V））、改&lt;/h5&gt;

&lt;p&gt;put的过程很简单：先校验参数，如果key为null那么就调用putForNullKey方法，否则找到key对应的table位置，遍历该位置的链表，如果链表中有该key那么就修改value否则就新增一个节点到改链表里。我们讨论put方法的几个函数细节：&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;putForNullKey&lt;/strong&gt;：此方法针对key为null的put，需要注意的是null总是放在table[0]的位置。方法步骤跟put普通元素一样，遍历table[0]的链表，如果链表中存在null那么就修改value，如果不存在就新增Entry节点。看下面的动图可能更加形象。&lt;img src=&#34;http://oajsuo3nv.bkt.clouddn.com/2016-8-17-put-null.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;hash重散列&lt;/strong&gt;:将key的hashcode再进行一次散列计算，使hash的值更加分散。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;indexFor&lt;/strong&gt;：见最后一部分的问题探讨。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;addEntry&lt;/strong&gt;：增加一个节点。由于hashmap维护的是单链表，所以是在表头插入。增加节点的时候我们要考虑增加后是否需要扩容。如果需要扩容即扩容两倍，然后把源hashmap的table中的值拷贝到新的table中，需要重新散列，所以这个操作为O(n)时间复杂度。&lt;/p&gt;

&lt;h5 id=&#34;删-remove-k:69821dbc4807e9884618c48763635519&#34;&gt;删（remove(K)）&lt;/h5&gt;

&lt;p&gt;删除的过程也很清晰：先计算key所对应的table索引值，然后就是单链表删除节点的方法（单链表删除需要保留前一个节点以便完成节点删除后的替换）。我们以删除10为例子，看下过程。&lt;img src=&#34;http://oajsuo3nv.bkt.clouddn.com/2016-8-24-remove.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;查-get-key:69821dbc4807e9884618c48763635519&#34;&gt;查（get(key)）&lt;/h5&gt;

&lt;p&gt;查询很简单：如果为null就调用getForNullKey（table[0]顺序查找）。不为空找到table索引，然后遍历索引所在的单链表，如果找到key返回对应的value，否则返回null。查询比较简单，这里就不动态展示了。&lt;/p&gt;

&lt;h5 id=&#34;其他方法:69821dbc4807e9884618c48763635519&#34;&gt;其他方法&lt;/h5&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;size&lt;/strong&gt;：返回当前map大小。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;isEmpty&lt;/strong&gt;：判断map是否为空。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;getEntry&lt;/strong&gt;：通过key找寻对应的entry节点。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;keySet和values&lt;/strong&gt;：通过迭代器返回key和value的集合，这里不进行讨论。&lt;/p&gt;

&lt;h2 id=&#34;hashmap若干问题:69821dbc4807e9884618c48763635519&#34;&gt;hashMap若干问题&lt;/h2&gt;

&lt;h4 id=&#34;容量为2的指数的奥妙:69821dbc4807e9884618c48763635519&#34;&gt;容量为2的指数的奥妙？&lt;/h4&gt;

&lt;p&gt;在文章开始，我们提到了hashmap数组容量必须为2的指数大小，而且构造函数参数如果不是2的指数还会调整到满足此规则的不小于传入参数的值，现在我们就来探究一下hashmap为什么要有这个规则。其实奥妙就在indexfor中,indexfor函数源码如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;static int indexFor(int h, int length) {
return h &amp;amp; (length-1);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;关键就是在于length-1把容量大小-1后二进制所有的位都变为1，这样会减少散列冲突。我们以长度16和长度15比较&lt;img src=&#34;http://oajsuo3nv.bkt.clouddn.com/2016-08-17-hashyu.jpg&#34; alt=&#34;&#34; /&gt;可以看到长度为15发生散列冲突，在散列值质量高的情况（hashmap通过hash函数保证），hashmap这种做法会让散列冲突尽可能减少。&lt;/p&gt;

&lt;h4 id=&#34;transient关键字:69821dbc4807e9884618c48763635519&#34;&gt;transient关键字？&lt;/h4&gt;

&lt;p&gt;我们可以看到hashmap中的table使用transient关键字修饰。transient关键字我们都熟悉，在序列化的时候可以不被序列化。那hashmap如何传值？答案当然是是通过writeObject，将hashmap中的值进行序列化。这里考虑到两个问题&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;空间考虑&lt;/strong&gt;：hashmap很多存储空间尚未使用，序列化没有意义，仅序列化存储元素数组&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;不同jvm考虑&lt;/strong&gt;：table中的内存分布是根据key的hashcode计算的，但是不同的jvm针对同一个可以产生的hashcode可能是不同的。如果使用默认序列化，反序列化之后元素位置是跟序列化之前相同的，可是这个jvm产生的hashcode变了，indexfor对于同一个key在不同的jvm对应不同的值，这样肯定不行的。这就是为什么要加transient关键字，为了就是忽略内存分布，通过readObject将hashmap重新生成。&lt;/p&gt;

&lt;h4 id=&#34;volatile关键字:69821dbc4807e9884618c48763635519&#34;&gt;volatile关键字？&lt;/h4&gt;

&lt;p&gt;在hashmap中，modCount、keySet、values都使用volatile关键字修饰。这里的原因其实很简单：我们知道volatile关键字一个特点就是内存可见性，某个变量修改之后其他线程会立即看到修改，上述三个变量都需要这样的特性，针对修改需要立即体现，所以用到了volatile关键字。&lt;/p&gt;

&lt;h4 id=&#34;非线程安全:69821dbc4807e9884618c48763635519&#34;&gt;非线程安全？&lt;/h4&gt;

&lt;p&gt;在多线程情况下，hashmap的put、get方法都是很脆弱的。这是一个比较大的话题，推荐大家看耗子叔的博客：&lt;a href=&#34;http://coolshell.cn/articles/9606.html&#34;&gt;疫苗：Java HashMap的死循环&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>散列表面面观</title>
      <link>http://jatesun.github.io/2016/08/12/%E6%95%A3%E5%88%97%E8%A1%A8%E9%9D%A2%E9%9D%A2%E8%A7%82</link>
      <pubDate>Fri, 12 Aug 2016 15:26:31 +0200</pubDate>
      
      <guid>http://jatesun.github.io/2016/08/12/%E6%95%A3%E5%88%97%E8%A1%A8%E9%9D%A2%E9%9D%A2%E8%A7%82</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://oajsuo3nv.bkt.clouddn.com/2016-8-12-sanlie.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;引子:1ef033cbd1577857c2f001722bad4a2f&#34;&gt;引子&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97&#34;&gt;散列&lt;/a&gt;的概念应用很广泛，比如加密，散列表，几何散列等。而&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8&#34;&gt;散列表&lt;/a&gt;更是日常工作中常见的数据结构，同时也是面试中最常见的面试话题之一，很多问题都可以归结到散列表。网上的大部分文章都是直接进入&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/HashMap.html&#34;&gt;hashMap&lt;/a&gt;的源码解读上，这会让很多刚开始接触散列表的童鞋觉得如坠雾里，看的不知所以。我认为这是因为对于散列的最基本的概念不熟悉导致的，所以这篇文章立足于散列的基本概念，层层递进讲解散列表，目的是让不了解散列的同学读完这篇文章也能较为深入了解散列表。&lt;/p&gt;

&lt;h2 id=&#34;什么是散列表:1ef033cbd1577857c2f001722bad4a2f&#34;&gt;什么是散列表&lt;/h2&gt;

&lt;p&gt;提到散列表，关键的三个概念是键（key）、散列函数（hash Fuction）、散列表（hash Table）。通过wiki的解释我们可以加深理解&lt;code&gt;散列表是根据键（key）直接访问内存存储位置的数据结构。即通过调用一个散列函数（形如F(key)）来得到实际存放位置（散列表）来访问记录&lt;/code&gt;还有一个实际的例子：&lt;code&gt;查找电话簿中某人号码，在首字母为W的表中查找“王”姓的电话号码，显然比直接查找就要快得多。这里使用人名作为关键字，“取首字母”是这个例子中散列函数的函数法则  F()，存放首字母的表对应散列表。&lt;/code&gt;我们可以通过下图简单的模型更加形象的了解散列表。
&lt;img src=&#34;http://oajsuo3nv.bkt.clouddn.com/2016-8-12-sanlie1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;为什么会有散列:1ef033cbd1577857c2f001722bad4a2f&#34;&gt;为什么会有散列&lt;/h2&gt;

&lt;p&gt;hash的概念起源于1956年，dumey用它来解决&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E7%AC%A6%E5%8F%B7%E8%A1%A8&#34;&gt;符号表问题&lt;/a&gt;。使得数据表的插入、删除、查询操作都可以在常数时间完成。我们常用的arrayList、linkedList一个善于查询、一个善于新增和删除，而散列表完美的将两者的长处集合，通过一层散列函数将数据的增删改查都维持在常数时间，正是这种长处让散列如此迷人。&lt;/p&gt;

&lt;h2 id=&#34;散列深入:1ef033cbd1577857c2f001722bad4a2f&#34;&gt;散列深入&lt;/h2&gt;

&lt;p&gt;接下来我们更加深入的了解散列的内容&lt;/p&gt;

&lt;h4 id=&#34;散列函数:1ef033cbd1577857c2f001722bad4a2f&#34;&gt;散列函数&lt;/h4&gt;

&lt;p&gt;我们知道散列函数就是通过key找到对应值的函数。作为一个散列函数，唯一的职责就是将key散列到散列表对应的位置上，从而找到记录。那么一个好的散列函数应该是保证对于每个key都均匀的对应到散列表的位置上，而不是每次都对应一个位置，或者某些位置对应次数明显多于其他，这是非常重要的。因为散列函数越好，那么出现散列冲突（见下面散列冲突）的次数就越少，从而间接提高了整个散列表的效率。&lt;/p&gt;

&lt;h4 id=&#34;散列冲突:1ef033cbd1577857c2f001722bad4a2f&#34;&gt;散列冲突&lt;/h4&gt;

&lt;p&gt;所谓散列冲突，就是多个key通过散列函数散列之后对应同一个地址。出现散列冲突之后我们要进行冲突的处理。通常使用的散列冲突处理方法有两种。一种是分离链接法（拉链法），另外一种是开放定址法（探测散列）。下面通过简单的散列函数（除留余数）来简单的介绍这两种方法。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;分离链接&lt;/strong&gt;: 当遇到散列冲突时，使用链表解决，将冲突的key放到原来数据节点后面，形成链表数据结构。我们经常使用的&lt;code&gt;hashmap使用的就是分离链接处理散列冲突&lt;/code&gt;。如下图所示
&lt;img src=&#34;http://oajsuo3nv.bkt.clouddn.com/2016-8-12-kaifadingzhi.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;开放定址&lt;/strong&gt;:遇到散列冲突，一次尝试余下的单元，直到有空单元。如下图
&lt;img src=&#34;http://oajsuo3nv.bkt.clouddn.com/2016-8-12-kaifang.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;装填因子:1ef033cbd1577857c2f001722bad4a2f&#34;&gt;装填因子&lt;/h4&gt;

&lt;p&gt;装填因子一般用λ表示，意义为散列表中的元素个数与该表大小的比。如果比例超过了装填因子，那么散列表会扩容，然后将原本的数据重新散列到新的散列表里，这个过程称之为&lt;code&gt;rehash&lt;/code&gt;（再散列）。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;越大越好？&lt;/strong&gt;:一般散列表会设置装填因子，理想的装填因子当然是1，即填满散列表，但是实际上并不是如此。因为装填因子越大意味着发生散列冲突的概率越大，而散列冲突对散列表的效率有影响。这一点不难理解，因为散列的是否发生多少冲突，那么查询修改删除的时候也会遇到同样次数的冲突，次数越多散列表的效率越低，所以装填因子不是越大越好而是选择合适的值。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;应该多大&lt;/strong&gt;：不同的散列冲突方法采用的装填因子是不同的。比如分离链接采用的装填因子一般是0.7到0.8，开放定址一般是小于0.5（&lt;code&gt;hashmap默认的装填因子为0.75&lt;/code&gt;）。这是因为分离连接采用的是链表解决冲突，如果冲突就加到链表里，这步动作是常数时间不论发生多少次冲突，而对于开放定址遇到冲突会继续寻找空单元，如果装填因子太大，那么冲突次数会增多，影响效率。所以分离连接的装填因子比开放定址的要大一些。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;结语:1ef033cbd1577857c2f001722bad4a2f&#34;&gt;结语&lt;/h2&gt;

&lt;p&gt;本文对散列表的起源，基本的概念做了初步的介绍。理解这些散列表的概念能够帮助我们在平常使用散列表相关的比如hashmap等做到心中有数，同时对理解hashmap的实现也有很大的帮助。篇幅所限，关于散列表更加细致的内容此处没有详细讲解，但是相信度过的童鞋对于散列表也应该有了初步的理解，后续会深入研究java中用到散列的集合类，从而更加深入的理解散列表。&lt;/p&gt;

&lt;h2 id=&#34;参考资料:1ef033cbd1577857c2f001722bad4a2f&#34;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8&#34;&gt;散列表Wiki百科&lt;/a&gt;  &lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97&#34;&gt;散列wiki百科&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B8%9B%E4%B9%A6%C2%B7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-Java%E8%AF%AD%E8%A8%80%E6%8F%8F%E8%BF%B0-%E9%A9%AC%E5%85%8B%C2%B7%E8%89%BE%E4%BC%A6%C2%B7%E7%BB%B4%E6%96%AF/dp/B01CNP0CG6/ref=sr_1_2?ie=UTF8&amp;amp;qid=1470986690&amp;amp;sr=8-2&amp;amp;keywords=%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90&#34;&gt;数据结构与算法分析:Java语言描述&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;如果你觉得我的文章写得不错，对你有所启发的话，欢迎分享，评论。谢谢支持
                                                                                           ——jatesun&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>如何写好一篇技术博客</title>
      <link>http://jatesun.github.io/2016/07/24/%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BD%E4%B8%80%E7%AF%87%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2</link>
      <pubDate>Sun, 24 Jul 2016 10:52:31 +0200</pubDate>
      
      <guid>http://jatesun.github.io/2016/07/24/%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BD%E4%B8%80%E7%AF%87%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://oajsuo3nv.bkt.clouddn.com/2016-7-22-write.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;引子:f9230e8b6c4b744b3b8db3489aa03f45&#34;&gt;引子&lt;/h2&gt;

&lt;p&gt;这篇文章只针对技术博客，从自身以及结合现状论述一个好的技术博客应该是如何的，怎样去写好一篇技术博客。其他的博客不在讨论范围之内。&lt;/p&gt;

&lt;h4 id=&#34;什么是技术博客:f9230e8b6c4b744b3b8db3489aa03f45&#34;&gt;什么是技术博客&lt;/h4&gt;

&lt;p&gt;所谓技术博客，当然是以技术为主，一个博客里面九成以上的内容应该是与技术相关的。当然不是说不能分享生活相关的内容，但是我觉得生活方面的内容可以放到微博上，然后在技术博客留个微博链接，那些觉得你博客不错然后想深入了解你的人自然会去关注你的微博。技术博客就应该以技术为主，不应该掺杂太多非技术的因素。&lt;/p&gt;

&lt;h4 id=&#34;技术博客现状:f9230e8b6c4b744b3b8db3489aa03f45&#34;&gt;技术博客现状&lt;/h4&gt;

&lt;p&gt;作为一个程序猿，平常当然离不开google(如果你还没开始脱离百度的话，赶紧去买个vpn翻墙吧)。但是除了google某些异常信息这种特定的信息，想要了解某个方面，比如jvm gc、事务等。大部分都是只告诉你是什么，或者说怎么配置，深入探讨做到深入本质的博客并不多。另外大部分的技术博客只是流于表面，人云亦云，千篇一律，这种技术博客读完又怎么能给别人带去收获呢？更有甚者，对于技术博客的态度极其恶劣，通篇博客错误百出，或者窃取他人的劳动成果为己用且不注明来源。如果人人都是这样，都是这种态度，国内的环境如何好得起来？正是看多了国内技术博客的种种弊端，决心写这样一篇文章来说说从我的角度出发，如何写一篇好的技术博客。&lt;/p&gt;

&lt;h2 id=&#34;如何写好一个技术博客:f9230e8b6c4b744b3b8db3489aa03f45&#34;&gt;如何写好一个技术博客&lt;/h2&gt;

&lt;p&gt;其实如何写好一个技术博客就是探讨一个好的技术博客应该由哪些因素构成的，两者之间差别不大。大体上可以从两个方面讨论&lt;/p&gt;

&lt;h4 id=&#34;内容方面:f9230e8b6c4b744b3b8db3489aa03f45&#34;&gt;内容方面&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;主题明确&lt;/strong&gt;：这是最重要的方面。一个好的博客首先要有一个好的博客题目，让人一看就知道这篇博客讲了什么，对自己有没有用处。不应该让读者自己去猜博客讲了什么，技术人员的时间都非常有限，如何在浩如烟海的文章中找到自己喜欢的有用的文章很不容易，这时候如果一个博客题目正好符合心中所想，是否会有一种如释重负的感觉？其实对于每个人都是这样，都希望快速的找到符合自己需求的文章，为了自己也为了他人，一个好的博客题目都是很重要的。
那什么是好的博客题目？一个好的博客题目不要太宽泛，越窄越好。比如&lt;code&gt;spring浅析&lt;/code&gt;这种题目就不是很好，会让人觉得不知所云，毕竟spring是一个很大的话题，但是&lt;code&gt;spring配置浅析&lt;/code&gt;就会让人很明确的知道这是针对spring配置方面的，就是一个不错的题目。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;条理清晰&lt;/strong&gt;：所谓条理，就是文章整体要讲的几大部分。诗经中有赋比兴手法，现代也有针对问题的七何分析法，或者更加简单的提出问题分析问题解决问题。这些都有助于确定一篇文章的结构，当然，如果你可以使用比如&lt;a href=&#34;http://www.xmind.net/&#34;&gt;xmind&lt;/a&gt;之类的思维工具协助分析，那么也会有事半功倍的效果。如果文章很长，生成导航目录也是很有必要的。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;层次分明&lt;/strong&gt;：这一条看似跟条理清晰有所重复，但是各有侧重点。条理是文章的整体结构，而层次则是文章内容上下彼此的联系。所谓层次感，就是文章的行文要符合人正常的逻辑思维，而不能跨度太大。行文之间应该有所联系，层层展开，娓娓道来，让人看完有种原来如此的感觉，而不是如坠雾里。文章层次感是行文中最难的部分，需要不断的去练习，阅读相关的文章，千锤百炼，才能达到下笔神助的效果。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;注意事项&lt;/strong&gt;：当然除了必要的因素还有很多行文需要注意的地方。
1.与主题无关的尽量少出现。诸如表情包、吐槽点等适当出现可以，但是太多肯定是不合适的。当然如果是生活文章另当别论。
2.行文力求精简，废话少说。要有最少的语言表达出想要表达的内容
3.切忌引用未求证的论据，除非论据来源值得相信（你也可以注明来源，错了也不是你的锅→_→）。
4.切忌过长。太长的文章会让然感到乏味，即使读完了可能也收获不了多少。主题太大时可以写成系列文章，每篇只针对一个重点讲解。&lt;/p&gt;

&lt;h4 id=&#34;行文风格:f9230e8b6c4b744b3b8db3489aa03f45&#34;&gt;行文风格&lt;/h4&gt;

&lt;p&gt;每个人的行文风格都各不相同，有的偏向朴实，有的偏向诙谐。这里不是统一每个人的行文风格，而只是对行文中应该注意的一些共同的地方总结。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;谦虚&lt;/strong&gt;：这是行文中最重要的一点。&lt;a href=&#34;https://zh.wikisource.org/zh/%E5%B0%9A%E6%9B%B8/%E5%A4%A7%E7%A6%B9%E8%AC%A8&#34;&gt;尚书·大禹谟&lt;/a&gt;中早有&lt;code&gt;满招损谦受益&lt;/code&gt;一说。每个人不可能了解每个技术的方方面面，在行文中要持有谦虚的态度，对评论中的中肯意见虚心接受。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;求真&lt;/strong&gt;：没有调查就没有发言权。做技术要认真，一个技术自己没有了解过不要妄下论断。&lt;code&gt;talking something you don&#39;t know is stupid.&lt;/code&gt;对自己没有证实的结论、论据要慎重，不要只会夸夸其谈。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;诙谐&lt;/strong&gt;：技术博客不是论文。通篇的严禁难免让人觉得无趣，技术博客行文中带有一点诙谐，或者恰当的类比，不仅让人会心一笑，也会让你把要讲的东西讲的更加明白，透彻。&lt;/p&gt;

&lt;h2 id=&#34;结语:f9230e8b6c4b744b3b8db3489aa03f45&#34;&gt;结语&lt;/h2&gt;

&lt;p&gt;以上就是我对如何写好一个技术博客的理解。当然，每个人对于技术博客都有不同的见解，希望我的见解能给看到这篇文章的人一点启迪，有抛砖引玉之效。这篇文章也就有所价值了。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;如果你觉得我的文章写得不错，对你有所启发的话，欢迎分享，评论。谢谢支持
                                                                                           ——jatesun&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>阅读书单</title>
      <link>http://jatesun.github.io/2016/07/22/%E9%98%85%E8%AF%BB%E4%B9%A6%E5%8D%95</link>
      <pubDate>Fri, 22 Jul 2016 13:07:31 +0200</pubDate>
      
      <guid>http://jatesun.github.io/2016/07/22/%E9%98%85%E8%AF%BB%E4%B9%A6%E5%8D%95</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://oajsuo3nv.bkt.clouddn.com/2016-7-19%20-shelter.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;概述:60cf6a04c6da219efbf1291ffe3027c1&#34;&gt;概述&lt;/h2&gt;

&lt;p&gt;这篇阅读书单只针对技术书籍以及跟技术相关的书籍，不涉及小说等书籍。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;如果你觉得我的文章写得不错，对你有所启发的话，欢迎分享，评论。谢谢支持
                                                                                           ——jatesun&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>博客开篇</title>
      <link>http://jatesun.github.io/2016/04/18/%E5%8D%9A%E5%AE%A2%E5%BC%80%E7%AF%87</link>
      <pubDate>Mon, 18 Apr 2016 13:07:31 +0200</pubDate>
      
      <guid>http://jatesun.github.io/2016/04/18/%E5%8D%9A%E5%AE%A2%E5%BC%80%E7%AF%87</guid>
      <description>

&lt;h2 id=&#34;博客搭建过程:3a7ef1b9ca4de558dca3e941c63b69d6&#34;&gt;博客搭建过程&lt;/h2&gt;

&lt;p&gt;博客的搭建是基于hugo搭建的，hugo是使用go语言开发的静态网站生成器。&lt;/p&gt;

&lt;h4 id=&#34;为什么是hugo:3a7ef1b9ca4de558dca3e941c63b69d6&#34;&gt;为什么是hugo&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;使用简单&lt;/strong&gt;：静态网站生成器比较流行的有&lt;a href=&#34;http://jekyllrb.com/&#34;&gt;jekyll&lt;/a&gt;、&lt;a href=&#34;https://hexo.io/&#34;&gt;hexo&lt;/a&gt;、&lt;a href=&#34;http://octopress.org/&#34;&gt;octopress.&lt;/a&gt;以及&lt;a href=&#34;http://gohugo.io/&#34;&gt;hugo&lt;/a&gt;。相对于其他的安装设置来说，hugo相对简单，只需要一个hugo.exe就可以轻松完成本地调试和生成静态页面。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;效率很高&lt;/strong&gt;：根据CoderZh的&lt;a href=&#34;http://blog.coderzh.com/2015/08/29/hugo/&#34;&gt;这篇文章&lt;/a&gt;，200多篇文章瞬间生成，比jekyll要快上不少。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;搭建过程:3a7ef1b9ca4de558dca3e941c63b69d6&#34;&gt;搭建过程&lt;/h4&gt;

&lt;p&gt;如果你想搭建hugo博客，那么我强烈推荐你看看&lt;a href=&#34;http://blog.coderzh.com/&#34;&gt;CoderZh&lt;/a&gt;的博客。博客里面有很多hugo相关的文章，相信会对你用hugo搭建博客很有帮助。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;hugo主站搭建&lt;/strong&gt;：在hugo官方网站&lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;下载&lt;/a&gt;。参照了CoderZh的&lt;a href=&#34;http://blog.coderzh.com/2015/08/29/hugo/&#34;&gt;文章&lt;/a&gt;、也参照了&lt;a href=&#34;http://nanshu.wang/post/2015-01-31/&#34;&gt;这篇文章&lt;/a&gt;。按照步骤，我相信不用很长时间你就会搭建起来属于自己的博客。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;hugo主题&lt;/strong&gt;：在&lt;a href=&#34;http://www.gohugo.org/theme/&#34;&gt;hugo中文网&lt;/a&gt;里面有很多主题。挑选一款符合你自己风格的主题吧，如果没有顺眼的你也可以自己去开发一套自己风格的主题然后分享出来。我挑选的是&lt;a href=&#34;http://www.gohugo.org/theme/hugo-icarus/&#34;&gt;Icarus&lt;/a&gt;主题，这个主题基本上你想要的博客特性都支持：简介、导航栏、全文搜索、标签、主题等等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;hugo个性化&lt;/strong&gt;：在默认选中的主题上，你可以添加或者修改一些内容来让你的博客更加有你的特色，比如加上你友情链接等等。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;为什么要搭建技术博客:3a7ef1b9ca4de558dca3e941c63b69d6&#34;&gt;为什么要搭建技术博客&lt;/h2&gt;

&lt;p&gt;其实自己想要建博客很久了，但是一直没有下定决心来建，有很多方面的原因&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;比较懒&lt;/strong&gt;：当然是首要原因了，工作完了下班后一般是看看书、追追美剧和动漫、打打台球啥的。以前还有记日记的习惯，慢慢的这个好习惯也渐渐没了。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;水平不够&lt;/strong&gt;：这是真的，毕竟工作年限不久。很多方面的知识还很欠缺，看了很多大神的博客更是自惭形秽。总觉得自己资历尚浅，怕写出来的东西班门弄斧，贻笑大方。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文章耗时&lt;/strong&gt;：&lt;code&gt;文章千古事，得失寸心知&lt;/code&gt;。虽说自己的文章并不能达到千古事的级别，但是既然要写就要尽自己全力写好。写好一篇文章不容易，写好一篇技术文章更不容易。需要时间构思、考虑文章结构、谨慎行言，力图把自己想要表达的主题表达清楚，同时紧凑而不流于形式，严谨而又不失幽默。想要达到这种程度，需要作者反复思考，这是很耗费心神的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;想建立一个属于自己的博客也是多方面的原因。&lt;/p&gt;

&lt;h4 id=&#34;好博客影响:3a7ef1b9ca4de558dca3e941c63b69d6&#34;&gt;好博客影响&lt;/h4&gt;

&lt;p&gt;作为程序员，平时浏览其他大牛的博客，借鉴他们的思想是常有的事。所以，久而久之觉得分享其实是很应该的，it这个行业就是应该open的，大家互相借鉴经验、分享经验，这样行业才会更好的去发展，而不是故步自封。另外，刘未鹏的这篇&lt;a href=&#34;http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/&#34;&gt;为什么你应该（从现在开始就）写博客&lt;/a&gt;对我也产生了很大的影响。&lt;/p&gt;

&lt;h4 id=&#34;提升自己技术能力:3a7ef1b9ca4de558dca3e941c63b69d6&#34;&gt;提升自己技术能力&lt;/h4&gt;

&lt;p&gt;工作许久，写过不少代码，技术能力总觉得一般，知识总是觉得似懂非懂，仿佛眼前蒙上了一层纱看不清真实。源码也看过，简单的还好比如简单集合和io等。但是涉及到框架级别的就不行了，总是看着一团乱麻，看着看着就乱了，没有决心和毅力继续下去往往就罢了。每每这样总是懊恼，想着怎么能督促自己更加用心去理解知识，学习知识。去年接触了&lt;a href=&#34;https://zh.wikipedia.org/zh/%E7%95%AA%E8%8C%84%E5%B7%A5%E4%BD%9C%E6%B3%95&#34;&gt;番茄工作法&lt;/a&gt;，并且用了基于番茄工作法的&lt;a href=&#34;https://pomotodo.com/&#34;&gt;番茄土豆&lt;/a&gt;，觉得自己工作效率提升很大，但是还不够。于是就萌生了写博客更上一层的加深自己对知识的理解，爱因斯坦说过&lt;code&gt;If you can&#39;t explain it simply, you don&#39;t understand it well enough.&lt;/code&gt;写博客某种意义上也是将某个知识讲出来，如果你讲的不好这篇博客质量也不会高了，这样就约束你去尽可能的理解你要讲的知识点，然后详细、准确、简单的娓娓道来。这样博客的质量才会高，才会对别人有所帮助。&lt;/p&gt;

&lt;h4 id=&#34;打造个人品牌名声:3a7ef1b9ca4de558dca3e941c63b69d6&#34;&gt;打造个人品牌名声&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;雁过留声，人过留名&lt;/code&gt;在it这个行业想要提高自己，需要你去经营自己。如果经营？靠嘴吃饭当然不行，it行业最务实，要是说的好听实际上不是那回事只是徒增笑料而已。作为程序员提升自己的影响力一般来说是这些方面：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;建博客写技术文章&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;穿梭于各大论坛&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;github，stackoverflow&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;现在it企业招人时如果你有一个长期维护的技术博客，或者github满屏飘绿，那么你的印象分就首先上去了。这时候如果你的博客质量以及github上的star再多点，那么基本上无需担心了。毕竟面试通过以前工作经历、现场的面试可能对你的评价有失偏颇，这时候博客，github等会给你加分不少。&lt;/p&gt;

&lt;h4 id=&#34;给别人一点指引-启发:3a7ef1b9ca4de558dca3e941c63b69d6&#34;&gt;给别人一点指引、启发&lt;/h4&gt;

&lt;p&gt;诚然，遇到问题google自然是好的。但是解决问题之后呢？是不是应该深入理解这一个知识点，防止下一次犯同样的错误？当然，网上关于某个话题的博文可能有很多篇，但是每个人理解的角度是不同的、讲解的深度也是不同的。可能有的文章你看了恍然大悟，而有的文章你看了仍然懵懵懂懂，可能并不是文章本身的问题而是理解问题。这里所说的理解是立意的高度问题，跟所谓的理解能力毫无关系，都是写一样的东西，立意不同、角度不同可能针对的人群也不尽相同。举个例子来说，针对集合来说，对于新人来说可能主要学的是用法，但是对于更高级别的程序员主要学的可能是api设计蕴藏的思想，都是两篇文章，不同的人当然有不同的理解了。我希望我写的文章能给别人一点点启发，这样就够了。&lt;/p&gt;

&lt;h2 id=&#34;后话:3a7ef1b9ca4de558dca3e941c63b69d6&#34;&gt;后话&lt;/h2&gt;

&lt;h4 id=&#34;博客会写什么:3a7ef1b9ca4de558dca3e941c63b69d6&#34;&gt;博客会写什么&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;技术分享&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;工作遇到的疑难问题&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;好的文章翻译&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自己的思想感悟&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;倒腾的小工具分享&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;好书分享&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;博客更新周期:3a7ef1b9ca4de558dca3e941c63b69d6&#34;&gt;博客更新周期&lt;/h4&gt;

&lt;p&gt;正如上面提到的，写一篇好的技术文章是一件很费劲的事情，尤其是当自己的资历尚浅的时候，除非是技术分享，博客狂人，否则想高频度的更新博客是不太可能的。鉴于自身的实际情况，觉得每月两三篇左右是不错的更新频率。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;如果你觉得我的文章写得不错，对你有所启发的话，欢迎分享，评论。谢谢支持
                                                                                           ——jatesun&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>